interval: {{interval}}
resource.url: {{url}}

state:
  url: {{url}}

# This program now has identical data structures in both branches of the
# ternary operator, which will satisfy the CEL compiler.
program: |-
  state.with(
    request(
      "GET",
      state.url
    ).do_request().as(resp,
      (resp.StatusCode == 200) ? {
        "events": string(resp.Body)
          .split('\n')
          .filter(line, line != '' && !line.startsWith('#'))
          .map(domain, {"message": domain})
      } : {
        "events": [{
          "message": "ERROR: Failed to download Red Flag Domains feed. Status code: " + string(resp.StatusCode)
        }]
      }
    )
  )

{{#if tags}}
tags:
{{#each tags as |tag|}}
- {{tag}}
{{/each}}
{{/if}}

{{#if timeout}}
resource.timeout: {{timeout}}
{{/if}}

{{#if proxy_url}}
resource.proxy_url: {{proxy_url}}
{{/if}}