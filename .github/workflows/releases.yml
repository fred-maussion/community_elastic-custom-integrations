name: Release

on:
  push:
    branches:
      - main
permissions:
  contents: write
  packages: read

jobs:
  detect:
    name: Detect Changed Packages
    runs-on: ubuntu-latest
    outputs:
      list: ${{ steps.set.outputs.packages }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Detect Changed Packages
        id: set
        run: |
          echo "Detecting changed packages..."

          # Safe fallback for orphan commits or first pushes
          if git rev-parse --verify HEAD^ >/dev/null 2>&1; then
            CHANGED=$(git diff --name-only HEAD^ HEAD | awk -F/ '{print $1}' | sort -u | uniq)
          else
            CHANGED=$(git ls-files | awk -F/ '{print $1}' | sort -u | uniq)
          fi

          echo "All changed top-level folders: $CHANGED"

          # Keep only valid integration folders (those with a manifest.yml)
          VALID_PKGS=()
          for dir in $CHANGED; do
            if [ -f "$dir/manifest.yml" ]; then
              VALID_PKGS+=("$dir")
            fi
          done

          echo "Valid integration packages: ${VALID_PKGS[*]}"

          # Convert to clean JSON array (no escaping!)
          JSON=$(printf '%s\n' "${VALID_PKGS[@]}" | jq -R . | jq -cs .)
          echo "JSON result: $JSON"

          # Write directly to GitHub output (NO escaping)
          echo "packages=$JSON" >> $GITHUB_OUTPUT

  build:
    name: Build Packages
    needs: detect
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect.outputs.list) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Get Package Metadata
        id: get_metadata
        run: |
          VERSION=$(egrep -w version ${{ matrix.app }}/manifest.yml | head -1 | awk '{print $2}' | tr -d '"')
          echo "Extracted version: $VERSION"
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Check if version already released
        id: check_release
        run: |
          TAG="${{ env.name }}-v${{ env.version }}"
          echo "Checking if release $TAG already exists..."

          # Query GitHub releases API
          RESPONSE=$(curl -s -H "Accept: application/vnd.github+json" \
                         -H "Authorization: Bearer ${{ secrets.GITHUB_TOKEN }}" \
                         https://api.github.com/repos/${{ github.repository }}/releases/tags/$TAG)

          if echo "$RESPONSE" | grep -q '"tag_name"'; then
            echo "Release $TAG already exists. Skipping build."
            echo "skip_build=true" >> $GITHUB_ENV
          else
            echo "No existing release found for $TAG. Proceeding with build."
            echo "skip_build=false" >> $GITHUB_ENV
          fi

      - name: Configure Git for GitHub Actions
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

      - name: Build Packag
        if: env.skip_build == 'false'
        run: |
          IMAGE_PATH=ghcr.io/${{ github.repository_owner }}/custom-integrations/elastic-package
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker pull $IMAGE_PATH:latest

          docker run --rm -v $PWD:/workspace -w /workspace/${{ matrix.app }} $IMAGE_PATH:latest sh -c "
            elastic-package lint;
            elastic-package build;
          "
          
      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: build-artifact-${{ matrix.app }}
          path: build/packages/${{ matrix.app }}-*.zip

  release:
    name: Release Packages
    needs: [build,detect]
    if: needs.detect.outputs.list != '[]'
    runs-on: ubuntu-latest
    strategy:
      matrix:
        app: ${{ fromJson(needs.detect.outputs.list) }}
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          name: build-artifact-${{ matrix.app }}
          path: build/packages

      - name: Verify Downloaded Artifact
        run: |
          echo "Verifying artifact for ${{ matrix.app }}"
          ls -al build/packages
          if [ ! -f build/packages/${{ matrix.app }}-*.zip ]; then
            echo "Error: Artifact not found for ${{ matrix.app }}" >&2
            exit 1
          fi

      - name: Get Current Version
        id: get_version
        run: |
          VERSION=$(egrep -w version ${{ matrix.app }}/manifest.yml | head -1 | awk '{print $2}')
          echo "version=$VERSION" >> $GITHUB_ENV

      - name: Extract Changelog Entry
        id: extract_changelog
        run: |
          VERSION="${{ env.version }}"
          APP="${{ matrix.app }}"
          CHANGELOG_FILE="${APP}/changelog.yml"

          if [ -f "$CHANGELOG_FILE" ]; then
            ENTRY=$(awk '/^- version: "'$VERSION'"/ {found=1} found && (/^- version: / && $0 !~ "'$VERSION'") {exit} found' "$CHANGELOG_FILE")

            if [ -z "$ENTRY" ]; then
              echo "No changelog entry found for version $VERSION" >&2
              exit 1
            fi

            MD_CHANGELOG=$(echo "$ENTRY" | awk '
              BEGIN { print "### Changelog for version '"$VERSION"':\n" }
              /- version:/ { next }
              /  changes:/ { next }
              /    - description:/ { sub("    - description:", "- **Description:**", $0); print $0 }
              /      type:/ { sub("      type:", "- **Type:**", $0); print $0 }
              /      link:/ { sub("      link:", "- **Link:**", $0); print $0 }
            ')

            echo "changelog<<EOF" >> $GITHUB_ENV
            echo "$MD_CHANGELOG" >> $GITHUB_ENV
            echo "EOF" >> $GITHUB_ENV
          else
            echo "Changelog file not found for $APP" >&2
            exit 1
          fi

      - name: Create Release Tag
        id: create_tag
        run: |
          TAG="${{ matrix.app }}-v${{ env.version }}"
          git tag "$TAG"
          git push origin "$TAG"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        with:
          tag_name: "${{ matrix.app }}-v${{ env.version }}"
          release_name: "${{ matrix.app }} v${{ env.version }}"
          body: |
            Changelog for version ${{ env.version }}:

            ${{ env.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload Build Artifact to Release
        uses: actions/upload-release-asset@v1
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: build/packages/${{ matrix.app }}-${{ env.version }}.zip
          asset_name: ${{ matrix.app }}-${{ env.version }}.zip
          asset_content_type: application/zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  deploy:
    needs: release
    name: Deploy
    runs-on: ubuntu-latest
    steps:
      - name: Download Build Artifact
        uses: actions/download-artifact@v4
        with:
          path: build/packages

      - name: Prepare deployment folder
        run: |
          mkdir -p ./deploy
          find ./build/packages -type f -name '*.zip' -exec mv {} ./deploy/ \;

      - name: Deploy to EPR
        uses: easingthemes/ssh-deploy@v5.1.0
        with:
          REMOTE_HOST: ${{ secrets.REMOTE_HOST }}
          REMOTE_USER: ${{ secrets.REMOTE_USER }}
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SOURCE: "./deploy/"
          TARGET: /var/package-registry/packages
          SCRIPT_AFTER: systemctl restart package-registry
